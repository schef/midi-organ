%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Fri May 16 16:57:19 2014
%%Title: /home/schef/github/midi-organ/geda/arduino_standalone/arduino_standalone_norefnum.sch
%%Author: (null)
%%BoundingBox: 0 0 595 841
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7870 531 translate 90 rotate
0.644077 0.644077 scale
-45800 -52200 translate
gsave
gsave
false true false false 202.222224 [(ATmega8) ] 0 56500 61500 180.555557 text
grestore
56900 59300 56600 59300 10 line
gsave
false false false false 161.777776 [(1) ] 0 56700 59350 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(RESET\) PC6) ] 0 56550 59300 144.444443 text
grestore
54300 61500 54600 61500 10 line
gsave
false true false false 161.777776 [(2) ] 0 54500 61550 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD0 \(RxD\)) ] 0 54650 61500 144.444443 text
grestore
54300 61300 54600 61300 10 line
gsave
false true false false 161.777776 [(3) ] 0 54500 61350 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD1 \(TxD\)) ] 0 54650 61300 144.444443 text
grestore
54300 61100 54600 61100 10 line
gsave
false true false false 161.777776 [(4) ] 0 54500 61150 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD2 \(INT0\)) ] 0 54650 61100 144.444443 text
grestore
54300 60900 54600 60900 10 line
gsave
false true false false 161.777776 [(5) ] 0 54500 60950 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD3 \(INT1\)) ] 0 54650 60900 144.444443 text
grestore
54300 60700 54600 60700 10 line
gsave
false true false false 161.777776 [(6) ] 0 54500 60750 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD4 \(XCK/T0\)) ] 0 54650 60700 144.444443 text
grestore
54300 57600 54600 57600 10 line
gsave
false true false false 161.777776 [(9) ] 0 54500 57650 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB6 \(XTAL1/OSC1\)) ] 0 54650 57600 144.444443 text
grestore
54300 57400 54600 57400 10 line
gsave
false true false false 161.777776 [(10) ] 0 54500 57450 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB7 \(XTAL2/TOSC2\)) ] 0 54650 57400 144.444443 text
grestore
54300 60500 54600 60500 10 line
gsave
false true false false 161.777776 [(11) ] 0 54500 60550 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD5 \(T1\)) ] 0 54650 60500 144.444443 text
grestore
54300 60300 54600 60300 10 line
gsave
false true false false 161.777776 [(12) ] 0 54500 60350 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD6 \(AIN0\)) ] 0 54650 60300 144.444443 text
grestore
54300 60100 54600 60100 10 line
gsave
false true false false 161.777776 [(13) ] 0 54500 60150 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD7 \(AIN1\)) ] 0 54650 60100 144.444443 text
grestore
54300 58800 54600 58800 10 line
gsave
false true false false 161.777776 [(14) ] 0 54500 58850 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB0 \(ICP1\)) ] 0 54650 58800 144.444443 text
grestore
54600 58600 54300 58600 10 line
gsave
false true false false 161.777776 [(15) ] 0 54500 58650 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB1 \(OC1A\)) ] 0 54650 58600 144.444443 text
grestore
54600 58400 54300 58400 10 line
gsave
false true false false 161.777776 [(16) ] 0 54500 58450 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB2 \(SS/OC1B\)) ] 0 54650 58400 144.444443 text
grestore
54600 58200 54300 58200 10 line
gsave
false true false false 161.777776 [(17) ] 0 54500 58250 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB3 \(MOSI/OC2\)) ] 0 54650 58200 144.444443 text
grestore
54600 58000 54300 58000 10 line
gsave
false true false false 161.777776 [(18) ] 0 54500 58050 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB4 \(MISO\)) ] 0 54650 58000 144.444443 text
grestore
54600 57800 54300 57800 10 line
gsave
false true false false 161.777776 [(19) ] 0 54500 57850 144.444443 text
grestore
gsave
false false false false 161.777776 [(PB5 \(SCK\)) ] 0 54650 57800 144.444443 text
grestore
56600 58200 56900 58200 10 line
gsave
false false false false 161.777776 [(20) ] 0 56700 58250 144.444443 text
grestore
gsave
false true false false 161.777776 [(AVCC) ] 0 56550 58200 144.444443 text
grestore
56600 58500 56900 58500 10 line
gsave
false false false false 161.777776 [(21) ] 0 56700 58550 144.444443 text
grestore
gsave
false true false false 161.777776 [(AREF) ] 0 56550 58500 144.444443 text
grestore
56600 60500 56900 60500 10 line
gsave
false false false false 161.777776 [(23) ] 0 56700 60550 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(ADC0\) PC0) ] 0 56550 60500 144.444443 text
grestore
56600 60300 56900 60300 10 line
gsave
false false false false 161.777776 [(24) ] 0 56700 60350 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(ADC1\) PC1) ] 0 56550 60300 144.444443 text
grestore
56600 60100 56900 60100 10 line
gsave
false false false false 161.777776 [(25) ] 0 56700 60150 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(ADC2\) PC2) ] 0 56550 60100 144.444443 text
grestore
56600 59900 56900 59900 10 line
gsave
false false false false 161.777776 [(26) ] 0 56700 59950 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(ADC3\) PC3) ] 0 56550 59900 144.444443 text
grestore
56600 59700 56900 59700 10 line
gsave
false false false false 161.777776 [(27) ] 0 56700 59750 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(ADC4/SDA\) PC4) ] 0 56550 59700 144.444443 text
grestore
56600 59500 56900 59500 10 line
gsave
false false false false 161.777776 [(28) ] 0 56700 59550 144.444443 text
grestore
gsave
false true false false 161.777776 [(\(ADC5/SCL\) PC5) ] 0 56550 59500 144.444443 text
grestore
54600 57300 56600 57300 10 line
56600 57300 56600 61700 10 line
56600 61700 54600 61700 10 line
54600 61700 54600 57300 10 line
60 60 54270 61470 fbox
60 60 54270 61270 fbox
60 60 54270 61070 fbox
60 60 54270 60870 fbox
60 60 54270 60670 fbox
60 60 54270 60470 fbox
60 60 54270 60270 fbox
60 60 54270 60070 fbox
60 60 54270 58770 fbox
60 60 54270 58570 fbox
60 60 54270 58370 fbox
60 60 56870 60470 fbox
60 60 56870 60270 fbox
60 60 56870 60070 fbox
60 60 56870 59870 fbox
60 60 56870 59670 fbox
60 60 56870 59470 fbox
grestore
gsave
false true false false 202.222224 [(U?) ] 0 56600 61800 180.555557 text
grestore
gsave
51000 57100 51200 57100 10 line
51900 57100 51700 57100 10 line
51400 57300 51400 56900 10 line
51500 57300 51500 56900 10 line
51700 57100 51500 57100 10 line
51400 57100 51200 57100 10 line
grestore
gsave
false false false false 202.222224 [(C?) ] 0 51200 57400 180.555557 text
grestore
gsave
false false false false 202.222224 [(22pF) ] 0 51600 56900 180.555557 text
grestore
gsave
51000 57800 51200 57800 10 line
51900 57800 51700 57800 10 line
51400 58000 51400 57600 10 line
51500 58000 51500 57600 10 line
51700 57800 51500 57800 10 line
51400 57800 51200 57800 10 line
grestore
gsave
false false false false 202.222224 [(C?) ] 0 51200 58100 180.555557 text
grestore
gsave
false false false false 202.222224 [(22pF) ] 0 51600 57900 180.555557 text
grestore
gsave
49600 62200 49600 62000 10 line
gsave
false true false false 161.777776 [(1) ] 270 49650 62050 144.444443 text
grestore
49600 61300 49600 61500 10 line
gsave
false false false false 161.777776 [(2) ] 270 49650 61450 144.444443 text
grestore
49800 61800 49400 61800 10 line
49600 61500 49600 61700 10 line
49600 61800 49600 62000 10 line
49600 61000 700 75 105 10 darc
49800 61911 49700 61911 10 line
49749 61860 49749 61960 10 line
newpath
49600 62200
25
0 360 arc
fill
newpath
49600 62200
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(C?) ] 0 48900 61800 180.555557 text
grestore
gsave
false false false false 202.222224 [(10uF) ] 0 48900 61600 180.555557 text
grestore
gsave
51800 62200 51800 62000 10 line
gsave
false true false false 161.777776 [(1) ] 270 51850 62050 144.444443 text
grestore
51800 61300 51800 61500 10 line
gsave
false false false false 161.777776 [(2) ] 270 51850 61450 144.444443 text
grestore
52000 61800 51600 61800 10 line
51800 61500 51800 61700 10 line
51800 61800 51800 62000 10 line
51800 61000 700 75 105 10 darc
52000 61911 51900 61911 10 line
51949 61860 51949 61960 10 line
newpath
51800 62200
25
0 360 arc
fill
newpath
51800 62200
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(C?) ] 0 52100 61800 180.555557 text
grestore
gsave
false false false false 202.222224 [(1uF) ] 0 52100 61600 180.555557 text
grestore
gsave
gsave
false false false false 161.777776 [(IN) ] 0 50300 62200 144.444443 text
grestore
gsave
false false false false 161.777776 [(OUT) ] 0 50848 62200 144.444443 text
grestore
gsave
false false false false 161.777776 [(7805) ] 0 50800 61700 144.444443 text
grestore
50200 61900 51200 61900 10 line
51200 61900 51200 62500 10 line
51200 62500 50200 62500 10 line
50200 62500 50200 61900 10 line
gsave
false false false false 161.777776 [(GND) ] 0 50556 62001 144.444443 text
grestore
50200 62200 49900 62200 10 line
gsave
false false false false 161.777776 [(1) ] 0 50000 62250 144.444443 text
grestore
50700 61600 50700 61900 10 line
gsave
false false false false 161.777776 [(2) ] 0 50600 61700 144.444443 text
grestore
51200 62200 51500 62200 10 line
gsave
false false false false 161.777776 [(3) ] 0 51330 62250 144.444443 text
grestore
grestore
gsave
false true false false 202.222224 [(U?) ] 0 51200 62600 180.555557 text
grestore
gsave
false false false false 202.222224 [(TO220) ] 0 50200 62600 180.555557 text
grestore
gsave
53100 59700 52900 59700 10 line
gsave
false false false true 161.777776 [(1) ] 0 52950 59650 144.444443 text
grestore
52200 59700 52400 59700 10 line
gsave
false true false true 161.777776 [(2) ] 0 52350 59650 144.444443 text
grestore
52700 59600 52600 59700 10 line
52600 59700 52700 59800 10 line
52700 59600 52700 59800 10 line
52600 59600 52600 59800 10 line
52600 59700 52400 59700 10 line
52700 59700 52900 59700 10 line
52650 59700 200 0 360 10 darc
52584 59397 52483 59296 10 line
52483 59296 52479 59345 10 line
52479 59345 52378 59243 10 line
52616 59482 52515 59382 10 line
52515 59382 52511 59431 10 line
52511 59431 52410 59330 10 line
grestore
gsave
false true false true 202.222224 [(LED?) ] 0 52300 59500 180.555557 text
grestore
gsave
52200 57100 52200 57300 10 line
52200 57600 52200 57800 10 line
52100 57350 52300 57350 10 line
52300 57350 52300 57550 10 line
52300 57550 52100 57550 10 line
52100 57550 52100 57350 10 line
52060 57300 52340 57300 10 line
52060 57600 52340 57600 10 line
newpath
52200 57100
25
0 360 arc
fill
newpath
52200 57100
25
0 360 arc
fill
newpath
52200 57800
25
0 360 arc
fill
newpath
52200 57800
25
0 360 arc
fill
grestore
gsave
false true false true 202.222224 [(U?) ] 0 52800 57600 180.555557 text
grestore
gsave
false false false false 202.222224 [(16 MHz) ] 0 52400 57200 180.555557 text
grestore
gsave
51600 59800 51500 59600 10 line
51500 59600 51400 59800 10 line
51400 59800 51300 59600 10 line
51300 59600 51200 59800 10 line
51600 59800 51700 59600 10 line
51700 59600 51750 59700 10 line
51900 59700 51750 59700 10 line
51000 59700 51152 59700 10 line
51201 59800 51150 59700 10 line
grestore
gsave
false false false false 202.222224 [(R?) ] 0 51200 59900 180.555557 text
grestore
gsave
false false false false 202.222224 [(220) ] 0 51300 59400 180.555557 text
grestore
49300 62200 49900 62200 10 line
51500 62200 57200 62200 10 line
49600 61300 51800 61300 10 line
50700 61600 50700 61300 10 line
49300 62500 49300 62200 10 line
51900 57800 52500 57800 10 line
51900 57100 52500 57100 10 line
50700 56800 50700 61300 10 line
54300 57600 52500 57600 10 line
52500 57600 52500 57800 10 line
54300 57400 52500 57400 10 line
52500 57400 52500 57100 10 line
56900 59300 57200 59300 10 line
57200 54600 57200 62200 10 line
gsave
51000 60700 51150 60700 10 line
gsave
false false false false 161.777776 [(1) ] 0 51050 60750 144.444443 text
grestore
51300 60650 51700 60650 10 line
51850 60700 52000 60700 10 line
gsave
false false false false 161.777776 [(2) ] 0 51900 60750 144.444443 text
grestore
51500 60650 51500 60850 10 line
51150 60700 51325 60700 10 line
51850 60700 51675 60700 10 line
51339 60700 14 0 360 10 darc
51662 60701 14 0 360 10 darc
grestore
gsave
false false false false 202.222224 [(S?) ] 0 51400 60950 180.555557 text
grestore
53000 62200 53000 60700 10 line
53000 60700 52000 60700 10 line
51000 60700 50700 60700 10 line
56900 58500 57500 58500 10 line
51800 62500 58400 62500 10 line
gsave
52700 62300 52600 62100 10 line
52600 62100 52500 62300 10 line
52500 62300 52400 62100 10 line
52400 62100 52300 62300 10 line
52700 62300 52800 62100 10 line
52800 62100 52850 62200 10 line
53000 62200 52850 62200 10 line
52100 62200 52252 62200 10 line
52301 62300 52250 62200 10 line
newpath
53000 62200
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
52100 62200
25
0 360 arc
fill
newpath
52100 62200
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(R?) ] 0 52300 62400 180.555557 text
grestore
gsave
false false false false 202.222224 [(10K) ] 0 52500 61900 180.555557 text
grestore
50700 57100 51000 57100 10 line
51000 57800 50700 57800 10 line
gsave
50700 56600 50700 56800 10 line
50600 56600 50800 56600 10 line
50655 56550 50745 56550 10 line
50680 56510 50720 56510 10 line
grestore
gsave
52100 55500 52400 55500 10 line
gsave
false false false false 161.777776 [(2) ] 0 50950 55450 144.444443 text
grestore
52100 54900 52400 54900 10 line
gsave
false false false false 161.777776 [(4) ] 0 50950 54850 144.444443 text
grestore
52100 54300 52400 54300 10 line
gsave
false false false false 161.777776 [(6) ] 0 50950 54250 144.444443 text
grestore
52100 55800 52400 55800 10 line
gsave
false false false false 161.777776 [(1) ] 0 50950 55750 144.444443 text
grestore
52100 55200 52400 55200 10 line
gsave
false false false false 161.777776 [(3) ] 0 50950 55150 144.444443 text
grestore
52100 54600 52400 54600 10 line
gsave
false false false false 161.777776 [(5) ] 0 50950 54550 144.444443 text
grestore
52100 55800 51200 55800 10 line
52100 55500 51200 55500 10 line
52100 55200 51200 55200 10 line
52100 54900 51200 54900 10 line
52100 54600 51200 54600 10 line
52100 54300 51200 54300 10 line
50700 54100 51200 54100 10 line
51200 54100 51200 56000 10 line
51200 56000 50700 56000 10 line
50700 56000 50700 54100 10 line
grestore
gsave
false false false false 202.222224 [(ICSP) ] 0 50800 56100 180.555557 text
grestore
54300 57800 53400 57800 10 line
53400 55200 53400 59700 10 line
54300 58000 53100 58000 10 line
53100 55800 53100 58000 10 line
54300 58200 52800 58200 10 line
52800 54900 52800 58200 10 line
53100 55800 52400 55800 10 line
52400 55500 58400 55500 10 line
53400 55200 52400 55200 10 line
52800 54900 52400 54900 10 line
52400 54600 57200 54600 10 line
gsave
52400 53800 52400 54000 10 line
52300 53800 52500 53800 10 line
52355 53750 52445 53750 10 line
52380 53710 52420 53710 10 line
grestore
52400 54300 52400 54000 10 line
53400 59700 53100 59700 10 line
52200 59700 51900 59700 10 line
51000 59700 50700 59700 10 line
58400 62500 58400 58400 10 line
58400 55500 58400 58000 10 line
57500 58500 57500 58200 10 line
57500 58200 56900 58200 10 line
gsave
57450 58000 57550 58000 10 line
57500 58050 57500 57950 10 line
gsave
false false false false 161.777776 [(Component not found:) ( switch-spdt-1_jumper.sym) ] 0 57600 58100 144.444443 text
grestore
58022 58523 58622 58523 50 line
58022 58523 58322 59023 50 line
58322 59023 58622 58523 50 line
gsave
false false false false 364.000000 [(!) ] 0 58292 58613 325.000000 text
grestore
grestore
gsave
false false false false 202.222224 [(S?) ] 0 57900 58600 180.555557 text
grestore
51800 62500 51800 62200 10 line
gsave
45800 52200 62300 52200 10 line
62300 52200 62300 63800 10 line
62300 63800 45800 63800 10 line
45800 63800 45800 52200 10 line
58200 52800 58200 52200 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 54800 52600 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 58300 52600 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 58300 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 54800 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 56500 52300 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 54800 52900 144.444443 text
grestore
54700 52200 62300 52200 10 line
62300 52200 62300 53600 10 line
62300 53600 54700 53600 10 line
54700 53600 54700 52200 10 line
54700 52800 62300 52800 10 line
grestore
gsave
false false false false 202.222224 [(arduino standalone) ] 0 55400 52900 180.555557 text
grestore
gsave
false false false false 202.222224 [(arduino_standalone_norefnum.sch) ] 0 55400 52600 180.555557 text
grestore
gsave
false false false false 202.222224 [(1) ] 0 55400 52300 180.555557 text
grestore
gsave
false false false false 202.222224 [(1) ] 0 56900 52300 180.555557 text
grestore
gsave
false false false false 202.222224 [(v0.1) ] 0 59200 52600 180.555557 text
grestore
gsave
false false false false 161.777776 [(Benjamin Horvat | http://horvat-elektronika.hr) ] 0 59200 52300 144.444443 text
grestore
gsave
49300 62500 49300 62700 10 line
49150 62700 49450 62700 10 line
gsave
false false false false 161.777776 [(Vdd) ] 0 49175 62750 144.444443 text
grestore
grestore
60 60 54270 61470 fbox
60 60 54270 61270 fbox
60 60 54270 61070 fbox
60 60 54270 60870 fbox
60 60 54270 60670 fbox
60 60 54270 60470 fbox
60 60 54270 60270 fbox
60 60 54270 60070 fbox
60 60 54270 58770 fbox
60 60 54270 58570 fbox
60 60 54270 58370 fbox
60 60 56870 60470 fbox
60 60 56870 60270 fbox
60 60 56870 60070 fbox
60 60 56870 59870 fbox
60 60 56870 59670 fbox
60 60 56870 59470 fbox
newpath
49600 62200
25
0 360 arc
fill
newpath
49600 62200
25
0 360 arc
fill
newpath
51800 62200
25
0 360 arc
fill
newpath
51800 62200
25
0 360 arc
fill
newpath
52200 57100
25
0 360 arc
fill
newpath
52200 57100
25
0 360 arc
fill
newpath
52200 57800
25
0 360 arc
fill
newpath
52200 57800
25
0 360 arc
fill
newpath
49600 62200
25
0 360 arc
fill
newpath
51800 62200
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
52100 62200
25
0 360 arc
fill
newpath
51800 62200
25
0 360 arc
fill
newpath
50700 61300
25
0 360 arc
fill
newpath
50700 61300
25
0 360 arc
fill
newpath
50700 61300
25
0 360 arc
fill
newpath
50700 61300
25
0 360 arc
fill
newpath
52200 57800
25
0 360 arc
fill
newpath
52200 57100
25
0 360 arc
fill
newpath
50700 61300
25
0 360 arc
fill
newpath
50700 61300
25
0 360 arc
fill
newpath
50700 60700
25
0 360 arc
fill
newpath
50700 57100
25
0 360 arc
fill
newpath
50700 57800
25
0 360 arc
fill
newpath
50700 59700
25
0 360 arc
fill
newpath
57200 59300
25
0 360 arc
fill
newpath
57200 59300
25
0 360 arc
fill
newpath
57200 59300
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
50700 60700
25
0 360 arc
fill
newpath
50700 60700
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
53000 62200
25
0 360 arc
fill
newpath
52100 62200
25
0 360 arc
fill
newpath
52100 62200
25
0 360 arc
fill
newpath
50700 57100
25
0 360 arc
fill
newpath
50700 57100
25
0 360 arc
fill
newpath
50700 57800
25
0 360 arc
fill
newpath
50700 57800
25
0 360 arc
fill
newpath
53400 57800
25
0 360 arc
fill
newpath
53400 57800
25
0 360 arc
fill
newpath
53400 57800
25
0 360 arc
fill
newpath
50700 59700
25
0 360 arc
fill
newpath
50700 59700
25
0 360 arc
fill
gsave
[ 0.00 1.00 -1.00 0.00 58400 58400 ] concat
newpath
-30 -30 moveto
-30 30 lineto
30 0 lineto
closepath
fill
grestore
60 60 58370 57970 fbox
newpath
51800 62200
25
0 360 arc
fill
newpath
51800 62200
25
0 360 arc
fill
showpage
%%End
